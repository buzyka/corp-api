<?php
/**
 * MeetingRoom
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * corp-api
 *
 * Corp API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kletser@maximalabs.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MeetingRoom Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeetingRoom implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MeetingRoom';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'publicity' => 'string',
'capacity' => 'string',
'equipment' => 'string[]',
'status' => 'string',
'enabled' => 'int',
'responsible' => '\Swagger\Client\Model\Worker[]',
'room_location' => '\Swagger\Client\Model\RoomLocation'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'name' => null,
'publicity' => null,
'capacity' => null,
'equipment' => null,
'status' => null,
'enabled' => null,
'responsible' => null,
'room_location' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'publicity' => 'publicity',
'capacity' => 'capacity',
'equipment' => 'equipment',
'status' => 'status',
'enabled' => 'enabled',
'responsible' => 'responsible',
'room_location' => 'roomLocation'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'publicity' => 'setPublicity',
'capacity' => 'setCapacity',
'equipment' => 'setEquipment',
'status' => 'setStatus',
'enabled' => 'setEnabled',
'responsible' => 'setResponsible',
'room_location' => 'setRoomLocation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'publicity' => 'getPublicity',
'capacity' => 'getCapacity',
'equipment' => 'getEquipment',
'status' => 'getStatus',
'enabled' => 'getEnabled',
'responsible' => 'getResponsible',
'room_location' => 'getRoomLocation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PUBLICITY__PUBLIC = 'public';
const PUBLICITY_INTERNAL = 'internal';
const EQUIPMENT_PROJECTOR = 'Projector';
const EQUIPMENT_BOARD = 'Board';
const EQUIPMENT_CONFERENCING = 'Conferencing';
const EQUIPMENT_TV = 'TV';
const EQUIPMENT_APPLE_TV = 'Apple TV';
const STATUS_ACTIVE = 'active';
const STATUS_DISABLED = 'disabled';
const STATUS_RENOVATION = 'renovation';
const ENABLED_1 = 1;
const ENABLED_0 = 0;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPublicityAllowableValues()
    {
        return [
            self::PUBLICITY__PUBLIC,
self::PUBLICITY_INTERNAL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEquipmentAllowableValues()
    {
        return [
            self::EQUIPMENT_PROJECTOR,
self::EQUIPMENT_BOARD,
self::EQUIPMENT_CONFERENCING,
self::EQUIPMENT_TV,
self::EQUIPMENT_APPLE_TV,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
self::STATUS_DISABLED,
self::STATUS_RENOVATION,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnabledAllowableValues()
    {
        return [
            self::ENABLED_1,
self::ENABLED_0,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['publicity'] = isset($data['publicity']) ? $data['publicity'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['equipment'] = isset($data['equipment']) ? $data['equipment'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['responsible'] = isset($data['responsible']) ? $data['responsible'] : null;
        $this->container['room_location'] = isset($data['room_location']) ? $data['room_location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['publicity'] === null) {
            $invalidProperties[] = "'publicity' can't be null";
        }
        $allowedValues = $this->getPublicityAllowableValues();
        if (!is_null($this->container['publicity']) && !in_array($this->container['publicity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'publicity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['capacity'] === null) {
            $invalidProperties[] = "'capacity' can't be null";
        }
        if ($this->container['equipment'] === null) {
            $invalidProperties[] = "'equipment' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        $allowedValues = $this->getEnabledAllowableValues();
        if (!is_null($this->container['enabled']) && !in_array($this->container['enabled'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'enabled', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['responsible'] === null) {
            $invalidProperties[] = "'responsible' can't be null";
        }
        if ($this->container['room_location'] === null) {
            $invalidProperties[] = "'room_location' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Meeting room id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Meeting room name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets publicity
     *
     * @return string
     */
    public function getPublicity()
    {
        return $this->container['publicity'];
    }

    /**
     * Sets publicity
     *
     * @param string $publicity Room access type
     *
     * @return $this
     */
    public function setPublicity($publicity)
    {
        $allowedValues = $this->getPublicityAllowableValues();
        if (!in_array($publicity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'publicity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['publicity'] = $publicity;

        return $this;
    }

    /**
     * Gets capacity
     *
     * @return string
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     *
     * @param string $capacity Meeting room capacity
     *
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets equipment
     *
     * @return string[]
     */
    public function getEquipment()
    {
        return $this->container['equipment'];
    }

    /**
     * Sets equipment
     *
     * @param string[] $equipment Meeting room equipment
     *
     * @return $this
     */
    public function setEquipment($equipment)
    {
        $allowedValues = $this->getEquipmentAllowableValues();
        if (array_diff($equipment, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'equipment', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['equipment'] = $equipment;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Meeting room status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return int
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param int $enabled Room enable status
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $allowedValues = $this->getEnabledAllowableValues();
        if (!in_array($enabled, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'enabled', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets responsible
     *
     * @return \Swagger\Client\Model\Worker[]
     */
    public function getResponsible()
    {
        return $this->container['responsible'];
    }

    /**
     * Sets responsible
     *
     * @param \Swagger\Client\Model\Worker[] $responsible Meeting room responsibles
     *
     * @return $this
     */
    public function setResponsible($responsible)
    {
        $this->container['responsible'] = $responsible;

        return $this;
    }

    /**
     * Gets room_location
     *
     * @return \Swagger\Client\Model\RoomLocation
     */
    public function getRoomLocation()
    {
        return $this->container['room_location'];
    }

    /**
     * Sets room_location
     *
     * @param \Swagger\Client\Model\RoomLocation $room_location room_location
     *
     * @return $this
     */
    public function setRoomLocation($room_location)
    {
        $this->container['room_location'] = $room_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
